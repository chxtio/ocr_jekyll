<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-27T02:23:12-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">OC Robotics</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Your Name</name><email>your-email@example.com</email></author><entry><title type="html">Sonar Viz Bot User Manual</title><link href="http://localhost:4000/2025/07/25/sonar_viz_bot_user_manual.html" rel="alternate" type="text/html" title="Sonar Viz Bot User Manual" /><published>2025-07-25T00:00:00-07:00</published><updated>2025-07-25T00:00:00-07:00</updated><id>http://localhost:4000/2025/07/25/sonar_viz_bot_user_manual</id><content type="html" xml:base="http://localhost:4000/2025/07/25/sonar_viz_bot_user_manual.html"><![CDATA[<!-- # Table of Contents

- [1. Software Setup](#1-software-setup)
    - [1.0 Join the Github Organizations](#10-join-the-github-organizations)
    - [1.1 Recommended Directory Structure](#11-recommended-directory-structure)
    - [1.2 Setting Up Git, GitHub, and SSH](#12-setting-up-git-github-and-ssh)
    - [1.3 Create Initial Directory Structure](#13-create-initial-directory-structure)
    - [1.4 OCR Docker](#14-ocr-docker)
    - [1.5 Differential Drive Robot](#15-differential-drive-robot)
    - [1.6 Raspberry Pi Setup](#16-raspberry-pi-setup)
- [2. Electrical Setup](#2-electrical-setup)
    - [2.1 Software](#21-software)
    - [2.2 L293D Motor Driver](#22-l293d-motor-driver) -->

<h1 id="project-introduction">Project Introduction</h1>

<p>This instruction manual outlines the process of designing and building the <em>Sonar Viz Bot</em>- a training project intended to introduce new OCR members to the engineering design process. It aims to quickly develop the core skills and competencies for rookies to meaningfully contribute to club projects and eventually compete in the University Rover Challenge (URC).</p>

<!-- This instruction manual outlines the process of designing and building *Sonar Viz Bot*- a training project intended to help new OCR members quickly develop the core skills and competencies to meaningfully contribute to club projects... and eventually compete in the University Rover Challenge (URC)! -->

<!-- <img src="https://i.imgur.com/QXUko01.png" width="400" > -->

<div style="text-align: center;">
  <img src="https://i.imgur.com/QXUko01.png" width="400" />
</div>

<h1 id="timeline">Timeline</h1>

<p><img src="https://i.imgur.com/HjTRo7Q.png" alt="picture 47" /></p>

<h1 id="mechanical-assembly">Mechanical Assembly</h1>

<p>See the suggested list of components below.</p>

<div style="text-align: center;">
  <img src="https://i.imgur.com/bSg7176.png" width="500" />
</div>

<h2 id="chassis-design">Chassis Design</h2>

<p>The chassis should be modeled using CAD software. It can be any reasonable size but must fit within the build volume of your 3D printer. For example, the Bambu Lab P1S has a build volume of 256 × 256 × 256 mm. For reference, the chassis shown in this manual measures 205 × 130 × 55 mm.</p>

<div style="text-align: center;">
  <img src="https://i.imgur.com/CSQIYHH.png" width="500" />
</div>

<!-- ![picture 64](https://i.imgur.com/qgng56N.png)   -->

<h2 id="3d-printing">3D Printing</h2>

<p>After designing the CAD of the chassis, save the file as <code class="language-plaintext highlighter-rouge">.stl</code>. Then slice and 3D print the chassis.</p>

<div style="text-align: center;">
  <img src="https://i.imgur.com/PoovXUC.png" width="500" />
</div>

<h2 id="wheel-and-motor-mounting">Wheel and Motor Mounting</h2>

<h3 id="todo">TODO</h3>

<div style="text-align: center;">
  <img src="https://i.imgur.com/qgng56N.png" width="500" />
</div>

<!-- <div style="text-align: center;">
  <img src="https://i.imgur.com/eaGLd6G.png" width="500">
</div> -->

<h2 id="battery-placement">Battery Placement</h2>

<h3 id="todo-1">TODO</h3>

<h1 id="1-software-setup">1. Software Setup</h1>
<p>The configuration of Git, GitHub, and SSH and the software environment setup is described. To streamline the development process, we have created a Docker container with Ubuntu 22.04, ROS2 Humble, and dependencies.</p>

<h2 id="10-join-the-github-org">1.0 Join the Github Org</h2>

<ul>
  <li>Add your GitHub username to the <a href="https://discord.com/channels/1204942703243173918/1337563694032359445/1339813815394766951">discord thread</a></li>
  <li>You will be invited to the following
    <ul>
      <li><a href="https://github.com/oc-robotics">https://github.com/oc-robotics</a></li>
      <li><a href="https://github.com/Training-Dummy">https://github.com/Training-Dummy</a></li>
    </ul>
  </li>
</ul>

<h2 id="11-recommended-directory-structure">1.1 Recommended Directory Structure</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/ocr/
│
├── dev_ws/
│   ├── build/
│   ├── install/
│   ├── log/
│   └── src/
│       └── differential_drive_robot/
│
├── ocr-docker/
│   ├── Dockerfile
│   ├── README.md
│   └── docker-compose.yml
│
└── training_ws/
       └── src/
</code></pre></div></div>

<h2 id="12-setting-up-git-github-and-ssh">1.2 Setting Up Git, GitHub, and SSH</h2>

<h3 id="install-git">Install Git</h3>

<h4 id="mac"><em>Mac</em></h4>
<ul>
  <li>Install homebrew and follow the terminal instructions</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<ul>
  <li>Install git</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>git
</code></pre></div></div>

<h4 id="windows"><em>Windows</em></h4>

<ul>
  <li>
    <p>Install <a href="https://gitforwindows.org/">Git for Windows</a>, which provides Git Bash (terminal emulator for running Git commands)</p>
  </li>
  <li>Or- install using Windows Powershell
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>winget <span class="nb">install</span> <span class="nt">--id</span> Git.Git <span class="nt">-e</span> <span class="nt">--source</span> winget
</code></pre></div>    </div>
  </li>
  <li>Note: if the above command didn’t work, you may need to install <a href="https://chxtio.github.io/ocr_jekyll/">winget</a> first</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$progressPreference</span> <span class="o">=</span> <span class="s1">'silentlyContinue'</span>
Write-Host <span class="s2">"Installing WinGet PowerShell module from PSGallery..."</span>
Install-PackageProvider <span class="nt">-Name</span> NuGet <span class="nt">-Force</span> | Out-Null
Install-Module <span class="nt">-Name</span> Microsoft.WinGet.Client <span class="nt">-Force</span> <span class="nt">-Repository</span> PSGallery | Out-Null
Write-Host <span class="s2">"Using Repair-WinGetPackageManager cmdlet to bootstrap WinGet..."</span>
Repair-WinGetPackageManager
Write-Host <span class="s2">"Done."</span>
</code></pre></div></div>

<ul>
  <li>You can also install Linux for Windows via <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL (Windows Subsystem for Linux)</a>
    <ul>
      <li>Once setup, Git can be installed using the Linux package manager</li>
    </ul>
  </li>
</ul>

<h4 id="ubuntu"><em>Ubuntu</em></h4>

<ul>
  <li>Install Git</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>git
</code></pre></div></div>

<h3 id="configure-git">Configure Git</h3>
<ul>
  <li>Configure Git, replacing <code class="language-plaintext highlighter-rouge">"Your name"</code> and <code class="language-plaintext highlighter-rouge">"your.email@example.com"</code> with your info (including the quotes) to link your local Git profile with GitHub</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"Your Name"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"your.email@example.com"</span>
</code></pre></div></div>

<ul>
  <li>Verify configuration</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--get</span> user.name
git config <span class="nt">--get</span> user.email
</code></pre></div></div>

<h3 id="set-up-ssh">Set up SSH</h3>
<ul>
  <li>Create a new SSH key using your GitHub email as a label</li>
</ul>

<p><strong>Note: Press enter to skip through the 3 prompts that follow</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"your.email@example.com"</span>
</code></pre></div></div>

<ul>
  <li>Copy the public key to your GitHub account (See <a href="https://github.com/Training-Dummy/howtoforge_git_ubuntu/blob/master/README.md#creating-an-ssh-key">example</a>)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_ed25519.pub
</code></pre></div></div>

<ul>
  <li>
    <p>In GitHub, navigate to <a href="https://github.com/settings/ssh/new"><strong>Settings -&gt; SSH and GPG keys -&gt; New SSH Key</strong></a> and paste it there (<a href="https://camo.githubusercontent.com/6d19b54f3f16f98804e3b33804d6eb2fa82fb2e796dbce825f8cba2f4b3f74a3/68747470733a2f2f692e696d6775722e636f6d2f676466624a4b6a2e706e67">example</a>)</p>
  </li>
  <li>
    <p>Confirm that your SSH key is connected to your GitHub account</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div>

<ul>
  <li>if successful, you should see:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre></div></div>

<h2 id="13-create-initial-directory-structure">1.3 Create Initial Directory Structure</h2>

<p><em>Preview</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/ocr/
│
├── dev_ws/
│   └── src/
│
├── ocr-docker/
│
├── training_ws/
│   └── src/
</code></pre></div></div>

<p>1. Create <code class="language-plaintext highlighter-rouge">ocr</code> folder and cd into it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/ocr <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/ocr
</code></pre></div></div>

<p>2. Create the <code class="language-plaintext highlighter-rouge">dev_ws</code> and <code class="language-plaintext highlighter-rouge">src</code> folder inside it (ROS packages will be installed in <code class="language-plaintext highlighter-rouge">src</code> later)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> dev_ws/src
</code></pre></div></div>

<p>3. Create <code class="language-plaintext highlighter-rouge">training_ws</code> folder and <code class="language-plaintext highlighter-rouge">src</code> folder inside it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> training_ws/src
</code></pre></div></div>

<p>4. Create <code class="language-plaintext highlighter-rouge">ocr-docker</code> folder</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>ocr-docker
</code></pre></div></div>

<p>5. Verify that folders have been created inside <code class="language-plaintext highlighter-rouge">ocr</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span>
</code></pre></div></div>

<!-- Expected output: -->

<pre><code class="language-output">dev_ws  ocr-docker  training_ws
</code></pre>

<h2 id="14-ocr-docker">1.4 OCR Docker</h2>

<div class="important">
  <strong>Important:</strong> If you have already installed the container, skip to 
  <a href="#step-3-run-the-docker-container">Step 3: Run the docker container</a>.
</div>
<p><br /></p>

<!-- > [!IMPORTANT]
> 
> If you have already installed the container, skip to [Step 2: Run the docker container](#step-2-run-the-docker-container). -->

<h3 id="step-1-install-the-container">Step 1: Install the container</h3>

<ul>
  <li>
    <p>Install and open <a href="https://docs.docker.com/desktop/">Docker Desktop</a></p>
  </li>
  <li>
    <p>Clone the <a href="https://github.com/oc-robotics/ocr-docker">repo</a> and cd into it</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>ocr
git clone https://github.com/oc-robotics/ocr-docker.git
<span class="nb">cd </span>ocr-docker
</code></pre></div></div>
<!-- 
- Make sure the volume is mounted correctly in `docker-compose.yml`
    - The default path assumes the following file structure

```
~/ocr/
│
├── dev_ws/
│   ├── build/
│   ├── install/
│   ├── log/
│   └── src/
│       └── differential_drive_robot/
│
├── ocr-docker/
│   ├── Dockerfile
│   ├── README.md
│   └── docker-compose.yml
│
└── training_ws/
``` -->

<ul>
  <li>Pull the base image from Docker Hub</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull mwoodward6/nekton:humble
</code></pre></div></div>
<ul>
  <li>Build the custom image</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> ocr-docker:humble <span class="nb">.</span>
</code></pre></div></div>

<h3 id="step-2-install-any-ros-pacakges">Step 2: Install any ROS pacakges</h3>

<ul>
  <li>As an example, we will install <a href="https://github.com/oc-robotics/differential_drive_robot">differential_drive_robot</a> in <code class="language-plaintext highlighter-rouge">src</code></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/ocr/dev_ws/src
</code></pre></div></div>

<ul>
  <li>Clone the repository</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:oc-robotics/differential_drive_robot.git
</code></pre></div></div>

<h3 id="step-3-run-the-docker-container">Step 3: Run the docker container</h3>
<ul>
  <li>Start the container in the background (detached mode)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div>

<ul>
  <li><em>Optional</em>: Open an interactive bash shell inside the container to run commands</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">exec</span> <span class="nt">-it</span> ocr-humble-nekton-og bash
</code></pre></div></div>

<ul>
  <li>Browse <a href="http://localhost:6080/">http://localhost:6080/</a> to access the remote desktop via VNC</li>
</ul>

<p><img src="https://i.imgur.com/h7OSLJJ.png" alt="picture 45" /></p>

<ul>
  <li>Stop the container</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exit</span> <span class="c"># Exit the interactive shell</span>
docker-compose stop
</code></pre></div></div>

<ul>
  <li>If you need to remove the container</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down
</code></pre></div></div>

<h3 id="troubleshooting">Troubleshooting</h3>
<!-- ### Fix "ports not available" error -->

<ul>
  <li>If you encounter an error due to port 6080 being in use, check which processes are using it</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>lsof <span class="nt">-i</span> :6080
</code></pre></div></div>

<ul>
  <li>Sample output</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
docker-pr  995 root    4u  IPv4  27629      0t0  TCP *:6080 (LISTEN)
docker-pr 1001 root    4u  IPv6  26542      0t0  TCP *:6080 (LISTEN)
</code></pre></div></div>
<ul>
  <li>Stop the processes</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo kill</span> <span class="nt">-9</span> 995 1001
</code></pre></div></div>

<h2 id="15-differential-drive-robot">1.5 Differential Drive Robot</h2>

<ul>
  <li>Open a terminal (run Terminator in NoVNC) and cd into <code class="language-plaintext highlighter-rouge">dev_ws/src</code></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>dev_ws/src
</code></pre></div></div>

<ul>
  <li>Build the package</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>colcon build <span class="nt">--symlink-install</span>
</code></pre></div></div>

<ul>
  <li>Source the setup</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source install</span>/setup.bash
</code></pre></div></div>

<ul>
  <li>Run the Gazebo simulation</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2 launch differential_drive_robot launch_sim.launch.py
</code></pre></div></div>

<p><img src="https://i.imgur.com/SqxKbpF.png" alt="picture 42" /></p>

<ul>
  <li>Visualize in <code class="language-plaintext highlighter-rouge">Rviz</code></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rviz2 <span class="nt">-d</span> src/differential_drive_robot/config/diff-drive.rviz
</code></pre></div></div>

<ul>
  <li>Drive the Robot with Keyboard Input (open a new terminal inside Terminator and run the following command line)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2 run teleop_twist_keyboard teleop_twist_keyboard
</code></pre></div></div>

<ul>
  <li>Note: If using <code class="language-plaintext highlighter-rouge">ros2_control</code> plugin, /cmd_vel must be remapped as follows:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2 run teleop_twist_keyboard teleop_twist_keyboard <span class="nt">--ros-args</span> <span class="nt">-r</span> /cmd_vel:<span class="o">=</span>/diff_cont/cmd_vel_unstamped
</code></pre></div></div>

<h1 id="16-ros2_control">1.6 ros2_control</h1>

<ul>
  <li>Install dependencies
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ros-humble-ros2-control</code>: Core control framework for robot hardware interfaces and controllers.</li>
      <li><code class="language-plaintext highlighter-rouge">ros-humble-ros2-controllers</code>: Predefined controllers that can be used to control robot hardware.</li>
      <li><code class="language-plaintext highlighter-rouge">gz_ros2_control</code>: Integration between ROS 2 control framework and Gazebo from source
        <ul>
          <li>Note: this will need to be compiled from source (see below)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>ros-humble-ros2-control ros-humble-ros2-controllers
</code></pre></div></div>

<ul>
  <li>Install the rosdep rules to resolve Gazebo Garden libraries</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>bash <span class="nt">-c</span> <span class="s1">'wget https://raw.githubusercontent.com/osrf/osrf-rosdep/master/gz/00-gazebo.list -O /etc/ros/rosdep/sources.list.d/00-gazebo.list'</span>
rosdep update
<span class="c"># check that resolve works</span>
rosdep resolve gz-garden
</code></pre></div></div>

<ul>
  <li>Compile <code class="language-plaintext highlighter-rouge">gz_ros2_control</code> from source</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># cd into dev_ws/src</span>
<span class="nb">cd </span>src
git clone https://github.com/federicociresola/gz_ros2_control.git <span class="nt">-b</span> humble-gz_garden
rosdep <span class="nb">install</span> <span class="nt">-r</span> <span class="nt">--from-paths</span> <span class="nb">.</span> <span class="nt">--ignore-src</span> <span class="nt">--rosdistro</span> <span class="nv">$ROS_DISTRO</span> <span class="nt">-y</span>
<span class="nb">cd</span> ..
colcon build
</code></pre></div></div>

<ul>
  <li>Run the Gazebo simulation</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2 launch differential_drive_robot launch_sim.launch.py
</code></pre></div></div>

<ul>
  <li>Run <code class="language-plaintext highlighter-rouge">teleop_twist_keyboard</code>
    <ul>
      <li>Note: <code class="language-plaintext highlighter-rouge">/cmd_vel</code> topic must be remapped  to <code class="language-plaintext highlighter-rouge">/diff_cont/cmd_vel_unstamped</code></li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2 run teleop_twist_keyboard teleop_twist_keyboard <span class="nt">--ros-args</span> <span class="nt">-r</span> /cmd_vel:<span class="o">=</span>/diff_cont/cmd_vel_unstamped
</code></pre></div></div>

<ul>
  <li>TODO: check if need to Install ros-gz-bridge</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>ros-humble-ros-gz-bridge
</code></pre></div></div>

<h2 id="17-raspberry-pi-setup">1.7 Raspberry Pi Setup</h2>

<p>This setup uses a Raspberry Pi 4. The OS must be configured by flashing the microSD card with Ubuntu 22.04 (see more) and installing ROS2 Humble.</p>

<p><img src="https://i.imgur.com/xJMgVJ2.png" width="500" /></p>

<h3 id="setup">Setup</h3>

<ul>
  <li>Install <a href="https://www.raspberrypi.com/software/">Rapberry Pi Imager</a></li>
  <li>
    <p>Insert the microSD card and choose OS -&gt; other general purpose SO -&gt; <strong>Ubuntu Desktop 22.04 LTS (64-bit)</strong></p>
  </li>
  <li>
    <p>Set up Ubuntu desktop</p>
  </li>
  <li>
    <p>Follow the <a href="https://random-restart.vercel.app/Software-Documentation/ROS/ROS2-Humble-Installation">instructions</a> for installing ROS2 Humble on the Raspberry Pi</p>
  </li>
  <li>Todo: Set up SSH on the pi for remote connections</li>
</ul>

<h3 id="connecting-peripherals-to-the-raspberry-pi">Connecting Peripherals to the Raspberry Pi</h3>

<p><img src="https://i.imgur.com/adBxdjT.png" width="500" /></p>

<ul>
  <li>
    <p>LCD Screen</p>

    <ul>
      <li><strong>Display</strong>: Connect the micro-HDMI port on the Raspberry Pi to the HDMI port on the screen</li>
      <li><strong>Power/touch screen</strong>: Use a micro-USB cable to connect the LCD screen to a USB port on the Raspberry Pi (not just for power, but also for data)</li>
    </ul>
  </li>
  <li>
    <p>Raspberry Pi</p>
  </li>
  <li>
    <p><strong>Power</strong>: Connect the USB-C port on the Raspberry Pi to a power bank or wall outlet.</p>
  </li>
</ul>

<p><img src="https://piportal.digitalharbor.org/cbfe7e712c4ce6e2deed4e129812df9a/rpi-plug-in.gif" width="500" /></p>

<h1 id="2-electrical-setup">2. Electrical Setup</h1>

<h2 id="21-software">2.1 Software</h2>

<ul>
  <li>Install <a href="https://www.arduino.cc/en/software/">Arduino IDE</a></li>
</ul>

<h2 id="22-l293d-motor-driver">2.2 L293D Motor Driver</h2>

<ul>
  <li>Wire the <a href="https://www.tinkercad.com/things/ehT2Jv0teTn-l293d-motor-driver?sharecode=ptKgyQ0MTZuHiNs5623u1GnzgUm6TEFuzgF3rDnG1LI">circuit</a> for the motor driver</li>
</ul>

<p><img src="https://i.imgur.com/1gINfhA.png" alt="picture 0" /></p>

<ul>
  <li>Upload the following <code class="language-plaintext highlighter-rouge">L293D_motor_driver.ino</code> sketch to the Arduino</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// L293D Motor Driver pins for right motor (Motor A)</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">ENA</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>    <span class="c1">// PWM speed control for right motor</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">IN1</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>    <span class="c1">// Direction control 1 for right motor</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">IN2</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>    <span class="c1">// Direction control 2 for right motor</span>
 
<span class="c1">// L293D Motor Driver pins for left motor (Motor B)</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">ENB</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>    <span class="c1">// PWM speed control for left motor</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">IN3</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>     <span class="c1">// Direction control 1 for left motor</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">IN4</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>     <span class="c1">// Direction control 2 for left motor</span>
 
<span class="kd">const</span> <span class="nx">int</span> <span class="nx">switchPin</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span> <span class="c1">// Switch to turn robot on/off</span>
 
<span class="nx">int</span> <span class="nx">motorSpeed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Starting motor speed</span>
 
<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">switchPin</span><span class="p">,</span> <span class="nx">INPUT_PULLUP</span><span class="p">);</span>
 
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">IN1</span><span class="p">,</span> <span class="nx">OUTPUT</span><span class="p">);</span>
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">IN2</span><span class="p">,</span> <span class="nx">OUTPUT</span><span class="p">);</span>
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">ENA</span><span class="p">,</span> <span class="nx">OUTPUT</span><span class="p">);</span>
 
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">IN3</span><span class="p">,</span> <span class="nx">OUTPUT</span><span class="p">);</span>
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">IN4</span><span class="p">,</span> <span class="nx">OUTPUT</span><span class="p">);</span>
    <span class="nx">pinMode</span><span class="p">(</span><span class="nx">ENB</span><span class="p">,</span> <span class="nx">OUTPUT</span><span class="p">);</span>
 
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">To infinity and beyond!</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">motorSpeed</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">Motor Speed: </span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="nx">motorSpeed</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">motorSpeed</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
    <span class="c1">// if (digitalRead(switchPin) == LOW) { // Switch ON (pressed)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">digitalRead</span><span class="p">(</span><span class="nx">switchPin</span><span class="p">)</span> <span class="o">==</span> <span class="nx">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Switch OFF </span>
        <span class="nx">rightMotor</span><span class="p">(</span><span class="nx">motorSpeed</span><span class="p">);</span>
        <span class="nx">leftMotor</span><span class="p">(</span><span class="nx">motorSpeed</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// Switch OFF</span>
        <span class="nx">rightMotor</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="nx">leftMotor</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="k">void</span> <span class="nx">rightMotor</span><span class="p">(</span><span class="nx">int</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">speed</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN1</span><span class="p">,</span> <span class="nx">HIGH</span><span class="p">);</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN2</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">speed</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN1</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN2</span><span class="p">,</span> <span class="nx">HIGH</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN1</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN2</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">analogWrite</span><span class="p">(</span><span class="nx">ENA</span><span class="p">,</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">speed</span><span class="p">));</span>
<span class="p">}</span>
 
<span class="k">void</span> <span class="nx">leftMotor</span><span class="p">(</span><span class="nx">int</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">speed</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN3</span><span class="p">,</span> <span class="nx">HIGH</span><span class="p">);</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN4</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">speed</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN3</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN4</span><span class="p">,</span> <span class="nx">HIGH</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN3</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
        <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">IN4</span><span class="p">,</span> <span class="nx">LOW</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">analogWrite</span><span class="p">(</span><span class="nx">ENB</span><span class="p">,</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">speed</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Your Name</name><email>your-email@example.com</email></author><summary type="html"><![CDATA[Project Introduction This instruction manual outlines the process of designing and building the Sonar Viz Bot- a training project intended to introduce new OCR members to the engineering design process. It aims to quickly develop the core skills and competencies for rookies to meaningfully contribute to club projects and eventually compete in the University Rover Challenge (URC). Timeline Mechanical Assembly See the suggested list of components below. Chassis Design The chassis should be modeled using CAD software. It can be any reasonable size but must fit within the build volume of your 3D printer. For example, the Bambu Lab P1S has a build volume of 256 × 256 × 256 mm. For reference, the chassis shown in this manual measures 205 × 130 × 55 mm. 3D Printing After designing the CAD of the chassis, save the file as .stl. Then slice and 3D print the chassis. Wheel and Motor Mounting TODO Battery Placement TODO 1. Software Setup The configuration of Git, GitHub, and SSH and the software environment setup is described. To streamline the development process, we have created a Docker container with Ubuntu 22.04, ROS2 Humble, and dependencies. 1.0 Join the Github Org Add your GitHub username to the discord thread You will be invited to the following https://github.com/oc-robotics https://github.com/Training-Dummy 1.1 Recommended Directory Structure ~/ocr/ │ ├── dev_ws/ │ ├── build/ │ ├── install/ │ ├── log/ │ └── src/ │ └── differential_drive_robot/ │ ├── ocr-docker/ │ ├── Dockerfile │ ├── README.md │ └── docker-compose.yml │ └── training_ws/ └── src/ 1.2 Setting Up Git, GitHub, and SSH Install Git Mac Install homebrew and follow the terminal instructions /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" Install git brew install git Windows Install Git for Windows, which provides Git Bash (terminal emulator for running Git commands) Or- install using Windows Powershell winget install --id Git.Git -e --source winget Note: if the above command didn’t work, you may need to install winget first $progressPreference = 'silentlyContinue' Write-Host "Installing WinGet PowerShell module from PSGallery..." Install-PackageProvider -Name NuGet -Force | Out-Null Install-Module -Name Microsoft.WinGet.Client -Force -Repository PSGallery | Out-Null Write-Host "Using Repair-WinGetPackageManager cmdlet to bootstrap WinGet..." Repair-WinGetPackageManager Write-Host "Done." You can also install Linux for Windows via WSL (Windows Subsystem for Linux) Once setup, Git can be installed using the Linux package manager Ubuntu Install Git sudo apt install git Configure Git Configure Git, replacing "Your name" and "your.email@example.com" with your info (including the quotes) to link your local Git profile with GitHub git config --global user.name "Your Name" git config --global user.email "your.email@example.com" Verify configuration git config --get user.name git config --get user.email Set up SSH Create a new SSH key using your GitHub email as a label Note: Press enter to skip through the 3 prompts that follow ssh-keygen -t ed25519 -C "your.email@example.com" Copy the public key to your GitHub account (See example) cat ~/.ssh/id_ed25519.pub In GitHub, navigate to Settings -&gt; SSH and GPG keys -&gt; New SSH Key and paste it there (example) Confirm that your SSH key is connected to your GitHub account ssh -T git@github.com if successful, you should see: Hi username! You've successfully authenticated, but GitHub does not provide shell access. 1.3 Create Initial Directory Structure Preview ~/ocr/ │ ├── dev_ws/ │ └── src/ │ ├── ocr-docker/ │ ├── training_ws/ │ └── src/ 1. Create ocr folder and cd into it mkdir ~/ocr &amp;&amp; cd ~/ocr 2. Create the dev_ws and src folder inside it (ROS packages will be installed in src later) mkdir -p dev_ws/src 3. Create training_ws folder and src folder inside it mkdir -p training_ws/src 4. Create ocr-docker folder mkdir ocr-docker 5. Verify that folders have been created inside ocr ls dev_ws ocr-docker training_ws 1.4 OCR Docker Important: If you have already installed the container, skip to Step 3: Run the docker container. Step 1: Install the container Install and open Docker Desktop Clone the repo and cd into it cd ocr git clone https://github.com/oc-robotics/ocr-docker.git cd ocr-docker Pull the base image from Docker Hub docker pull mwoodward6/nekton:humble Build the custom image docker build -t ocr-docker:humble . Step 2: Install any ROS pacakges As an example, we will install differential_drive_robot in src cd ~/ocr/dev_ws/src Clone the repository git clone git@github.com:oc-robotics/differential_drive_robot.git Step 3: Run the docker container Start the container in the background (detached mode) docker-compose up -d Optional: Open an interactive bash shell inside the container to run commands docker exec -it ocr-humble-nekton-og bash Browse http://localhost:6080/ to access the remote desktop via VNC Stop the container exit # Exit the interactive shell docker-compose stop If you need to remove the container docker-compose down Troubleshooting If you encounter an error due to port 6080 being in use, check which processes are using it sudo lsof -i :6080 Sample output COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME docker-pr 995 root 4u IPv4 27629 0t0 TCP *:6080 (LISTEN) docker-pr 1001 root 4u IPv6 26542 0t0 TCP *:6080 (LISTEN) Stop the processes sudo kill -9 995 1001 1.5 Differential Drive Robot Open a terminal (run Terminator in NoVNC) and cd into dev_ws/src cd dev_ws/src Build the package colcon build --symlink-install Source the setup source install/setup.bash Run the Gazebo simulation ros2 launch differential_drive_robot launch_sim.launch.py Visualize in Rviz rviz2 -d src/differential_drive_robot/config/diff-drive.rviz Drive the Robot with Keyboard Input (open a new terminal inside Terminator and run the following command line) ros2 run teleop_twist_keyboard teleop_twist_keyboard Note: If using ros2_control plugin, /cmd_vel must be remapped as follows: ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped 1.6 ros2_control Install dependencies ros-humble-ros2-control: Core control framework for robot hardware interfaces and controllers. ros-humble-ros2-controllers: Predefined controllers that can be used to control robot hardware. gz_ros2_control: Integration between ROS 2 control framework and Gazebo from source Note: this will need to be compiled from source (see below) sudo apt update sudo apt install ros-humble-ros2-control ros-humble-ros2-controllers Install the rosdep rules to resolve Gazebo Garden libraries sudo bash -c 'wget https://raw.githubusercontent.com/osrf/osrf-rosdep/master/gz/00-gazebo.list -O /etc/ros/rosdep/sources.list.d/00-gazebo.list' rosdep update # check that resolve works rosdep resolve gz-garden Compile gz_ros2_control from source # cd into dev_ws/src cd src git clone https://github.com/federicociresola/gz_ros2_control.git -b humble-gz_garden rosdep install -r --from-paths . --ignore-src --rosdistro $ROS_DISTRO -y cd .. colcon build Run the Gazebo simulation ros2 launch differential_drive_robot launch_sim.launch.py Run teleop_twist_keyboard Note: /cmd_vel topic must be remapped to /diff_cont/cmd_vel_unstamped ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped TODO: check if need to Install ros-gz-bridge sudo apt-get install ros-humble-ros-gz-bridge 1.7 Raspberry Pi Setup This setup uses a Raspberry Pi 4. The OS must be configured by flashing the microSD card with Ubuntu 22.04 (see more) and installing ROS2 Humble. Setup Install Rapberry Pi Imager Insert the microSD card and choose OS -&gt; other general purpose SO -&gt; Ubuntu Desktop 22.04 LTS (64-bit) Set up Ubuntu desktop Follow the instructions for installing ROS2 Humble on the Raspberry Pi Todo: Set up SSH on the pi for remote connections Connecting Peripherals to the Raspberry Pi LCD Screen Display: Connect the micro-HDMI port on the Raspberry Pi to the HDMI port on the screen Power/touch screen: Use a micro-USB cable to connect the LCD screen to a USB port on the Raspberry Pi (not just for power, but also for data) Raspberry Pi Power: Connect the USB-C port on the Raspberry Pi to a power bank or wall outlet. 2. Electrical Setup 2.1 Software Install Arduino IDE 2.2 L293D Motor Driver Wire the circuit for the motor driver Upload the following L293D_motor_driver.ino sketch to the Arduino // L293D Motor Driver pins for right motor (Motor A) const int ENA = 11; // PWM speed control for right motor const int IN1 = 13; // Direction control 1 for right motor const int IN2 = 12; // Direction control 2 for right motor // L293D Motor Driver pins for left motor (Motor B) const int ENB = 10; // PWM speed control for left motor const int IN3 = 8; // Direction control 1 for left motor const int IN4 = 9; // Direction control 2 for left motor const int switchPin = 7; // Switch to turn robot on/off int motorSpeed = 0; // Starting motor speed void setup() { pinMode(switchPin, INPUT_PULLUP); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT); pinMode(ENA, OUTPUT); pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT); pinMode(ENB, OUTPUT); Serial.begin(9600); Serial.println("To infinity and beyond!"); motorSpeed = 255; Serial.print("Motor Speed: "); Serial.println(motorSpeed); } void loop() { motorSpeed = 255; // if (digitalRead(switchPin) == LOW) { // Switch ON (pressed) if (digitalRead(switchPin) == HIGH) { // Switch OFF rightMotor(motorSpeed); leftMotor(motorSpeed); } else { // Switch OFF rightMotor(0); leftMotor(0); } } void rightMotor(int speed) { if (speed &gt; 0) { digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW); } else if (speed &lt; 0) { digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH); } else { digitalWrite(IN1, LOW); digitalWrite(IN2, LOW); } analogWrite(ENA, abs(speed)); } void leftMotor(int speed) { if (speed &gt; 0) { digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW); } else if (speed &lt; 0) { digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH); } else { digitalWrite(IN3, LOW); digitalWrite(IN4, LOW); } analogWrite(ENB, abs(speed)); }]]></summary></entry></feed>